<analysis>
The trajectory details the arduous process of refactoring a full-stack CRM application from an inconsistent ObjectId/UUID system to a pure UUID-only architecture. The previous AI engineer systematically debugged and fixed numerous bugs, including 404/500 errors, data inconsistencies, and UI issues. A major pivot occurred when the user mandated a full UUID refactor, abandoning band-aid fixes. Subsequent work focused on converting backend APIs (Customer, Bill, Inventory, Sales, Auth) and adapting the frontend. The process was iterative, involving frequent user feedback, identifying API mismatches (endpoints, methods, data formats), and correcting core architectural flaws like ObjectId generation and a temporary dual ID strategy. The latest significant change was implementing a composite  ( + ) to ensure data consistency across the bill lifecycle (check, inventory, sales). The work is currently focused on resolving frontend display issues stemming from backend API response format mismatches and missing endpoints, specifically for customer detail pages.
</analysis>

<product_requirements>
The 7ty.vn CRM is a Vietnamese, responsive mini-CRM for FPT/Shopee bill management, featuring Dashboard, Bill Checks, Inventory, Customers (with a 360Â° view), and Transactions. It uses JWT-based authentication with Admin/Manager/User roles and a modern glassmorphism login UI with green-yellow branding.

Key features and fixes implemented or requested include:
- UI/UX improvements: fixing UI overflow, post-login navigation, login page UI enhancements, animations.
- Core Functionality: dashboard stats accuracy, comprehensive inventory management, customer multi-selection, DAO Modal, phone call integration (deprioritized).
- Transaction Management: Analytics line chart for revenue/profit with edit functionality for all fields, transaction export, pagination, advanced filters/recommendations (pending).
- Critical Bug Fixes: 404/405/500 errors, ObjectId/UUID inconsistencies, data synchronization issues,  error, Credit Card DAO 500 error.
- Architectural Refactor: User-mandated full system refactor to a UUID-only architecture for all entity IDs (customers, bills, transactions, credit cards) to eliminate data inconsistency. This also involved abandoning dual data sources (bills/inventory_items) for a unified inventory system.
- System Documentation: Documenting the system, critical fixes, session handovers, unified bills architecture, and UUID migration plans.
- Database Management: Cleanup and seeding with consistent test data.
- External Integration: Reverting dynamic webhook rotation to a hardcoded webhook, then integrating with the real  webhook for bill checking, including correct payload and response parsing, and implementing composite bill IDs.
</product_requirements>

<key_technical_concepts>
- **Full-stack**: FastAPI (Python), React (JavaScript), MongoDB.
- **UI/UX**: TailwindCSS, Recharts, Glassmorphism, CSS animations.
- **Authentication**: JWT, bcrypt, role-based access control.
- **Asynchronous**: aiohttp, asyncio.
- **Data Handling**: Pydantic, MongoDB aggregation, UUIDs, Composite IDs.
- **External APIs**: Webhooks (n8n.phamthanh.net).
</key_technical_concepts>

<code_architecture>
The application uses a monorepo structure:


- :
    - **Importance**: Python dependency management.
    - **Changes**: Added , , , , , , .
- :
    - **Importance**: Core FastAPI application, all API routes, database interactions. Has undergone a major refactor to be UUID-only, then specifically adapted for composite bill IDs.
    - **Changes**: Extensive fixes for 404/500 errors, datetime comparison, ObjectId serialization (removed), unsafe field/array access. Implemented UUID-only for Customers, Bills, Inventory, Sales. Re-added and refactored authentication endpoints. Unified  endpoint logic. Implemented external webhook integration for bill checking () with dynamic SKU mapping and robust response parsing. Updated bill models and validation for composite bill IDs (). Implemented placeholder endpoints for various CRUD and stats functions.
-  (NEW):
    - **Importance**: Centralizes UUID generation and validation logic.
    - **Changes**: Initially created for UUIDs, now adapted to also handle composite bill ID generation and validation logic.
- :
    - **Importance**: Frontend dependency management.
    - **Changes**: Added .
- :
    - **Importance**: Main React component, routing, state, UI logic.
    - **Changes**: Fixed  to  for consistency. Fixed various API endpoint paths (e.g.,  to ). Commented out some missing reports endpoints. Fixed React key warnings. Added null safety ( operator) for  references and an  check in . Frontend error handling adjusted to correctly interpret backend responses for bill checking. Updated the  to fetch data from the correct  endpoint, which now returns a comprehensive customer detail object.
- :
    - **Importance**: Dedicated user login component.
    - **Changes**: Updated background, integrated animations, enhanced glassmorphism.
- :
    - **Importance**: Frontend environment variables, specifically .
    - **Changes**: Repeatedly updated  to fix domain mismatches (from  to a UUID-like preview domain), and then reverted to previous working domain after  domain was not found.
-  (NEW),  (NEW),  (NEW),  (NEW),  (NEW),  (NEW):
    - **Importance**: Documentation.
    - **Changes**: Created to document the initial system review, critical fixes, session handovers, and refactor plans.
-  (NEW):
    - **Importance**: Cleans and seeds database.
    - **Changes**: Used to reset database and fix test data generation (e.g., CreditCard schema issues), and to create admin users with specific credentials. Also used to create/update user records with UUID uid=0(root) gid=0(root) groups=0(root) fields while ignoring MongoDB's  ObjectId.
</code_architecture>

<pending_tasks>
- Complete  on the Customer Detail page.
- Implement  functionality in the Transactions tab.
- Implement  in the Transactions tab (full scope, beyond editing).
- Implement  to the Transactions tab.
- Implement  and  in the Analytics tab.
- Implement  (for revenue and profit transactions) in the Analytics tab.
- Complete the frontend refactor to exclusively use composite bill IDs and UUIDs, adapting all UI elements to new backend structure.
- Fully implement missing  endpoints (e.g., , ) that were commented out in the frontend.
- Implement placeholder endpoints like  (the core logic beyond external webhook call).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was deep into fixing frontend display issues related to the customer detail page. The backend APIs for customer data (list, stats, detail, transactions) were verified to be working correctly. The user reported a  error when accessing a customer's detailed profile, specifically for the endpoint . This indicates a mismatch where the frontend is attempting to call an endpoint that either does not exist or has been renamed/removed in the backend's UUID-only and composite ID refactor.
</current_work>

<optional_next_step>
Investigate and implement the  endpoint in the backend.
</optional_next_step>
