<analysis>
The previous AI engineer, TÃ¨o em, inherited an MVP CRM for FPT/Shopee bill management. Initially, it addressed several critical bugs like  errors, incorrect inventory logic, and  errors in DAO functionality. A significant challenge was the pervasive  vs.  inconsistency across the MongoDB database, leading to numerous not found errors and data integrity issues. Data synchronization problems between inventory tabs and DAO modals also emerged due to dual data sources. The engineer systematically debugged and applied dual lookup strategies to most API endpoints as a temporary fix. Facing recurring issues, a comprehensive system audit was conducted, which surprisingly yielded a 100% stable assessment, despite immediate re-emergence of bugs. Finally, the user mandated a full refactor to a UUID-only system, abandoning the band-aid fixes. The current state is mid-backend refactor, with core Customer, Bill, and Inventory APIs already converted to use only UUIDs.
</analysis>

<product_requirements>
The 7ty.vn CRM is a Vietnamese, responsive mini-CRM for FPT/Shopee bill management. It includes Dashboard, Bill Checks, Inventory, Customers (with a 360Â° view), and Transactions. Authentication is JWT-based with Admin/Manager/User roles and a modern glassmorphism login UI. The application uses a consistent green-yellow branding.

Key features and fixes implemented/requested include:
- Fixing UI overflow, 404 errors for Check Láº¡i button, post-login navigation, inaccurate dashboard stats, and  error.
- Comprehensive inventory management refactor to fix bill deletion, 405/404 errors, separating Available and All Bills tabs, and updating delete logic.
- Implementing customer multi-selection with bulk actions (delete, export).
- Resolving a  error in Credit Card DAO by adding  enum value.
- Full authentication and role-based access control review.
- Documenting the entire system.
- Implementing (and later rolling back) a dynamic webhook rotation system, reverting to a hardcoded webhook without delay.
- Enhancing the Login Page UI.
- Implementing missing functionalities on the Customer Detail page, specifically the DAO Modal (completed) and phone call integration (later deprioritized).
- Implementing Analytics line chart for revenue and profit transactions with edit functionality for all fields.
- User-requested database cleanup and seeding with consistent test data.
- User-mandated full system refactor to a UUID-only architecture for all IDs (customers, bills, transactions, credit cards) to eliminate data inconsistency and architectural flaws.
</product_requirements>

<key_technical_concepts>
- **Full-stack**: FastAPI (Python), React (JavaScript), MongoDB.
- **UI/UX**: TailwindCSS, Shadcn UI, Recharts, Glassmorphism, CSS animations.
- **Authentication**: JWT, bcrypt, role-based access control.
- **Asynchronous**: aiohttp, asyncio.
- **Data Handling**: Pydantic, MongoDB aggregation, UUIDs.
- **Error Handling**: Custom exceptions, toast notifications.
- **Data Consistency**: ObjectId vs. UUID handling, dual lookup strategy (deprecated), UUID-only architecture (new).
</key_technical_concepts>

<code_architecture>
The application uses a monorepo structure:


- :
    - **Importance**: Python dependency management.
    - **Changes**: Added , , , , , , .
- :
    - **Importance**: Core FastAPI application, all API routes, database interactions. Currently undergoing a major refactor to be UUID-only.
    - **Changes**: Historically, extensive fixes for 404/500 errors, datetime comparison, ObjectId serialization, unsafe field/array access, dual lookup for customer/bill/credit card IDs, webhook logic (rolled back).
    - **Current State**: Being rewritten for UUID-only architecture. , , and  APIs are now fully refactored to use only UUIDs for IDs and foreign keys. This includes updated Pydantic models, database queries, and response handling.
-  (NEW):
    - **Importance**: Centralizes UUID generation and validation logic for consistency across the backend.
    - **Changes**: Created to provide utility functions for handling UUIDs in the new architecture.
- :
    - **Importance**: Frontend dependency management.
    - **Changes**: Added .
- :
    - **Importance**: Main React component, routing, state, UI.
    - **Changes**: Fixed Check Láº¡i button, refactored , corrected inventory logic, implemented customer multi-selection, added DAO Modal ( UI, states, ), moved  to . Updated  for edit functionality,  callback, and fixed . Also, updated  to use  for DAO modal and both inventory tabs for consistency.
- :
    - **Importance**: Dedicated user login component.
    - **Changes**: Updated background, integrated animations, enhanced glassmorphism.
- :
    - **Importance**: Global CSS.
    - **Changes**: Added custom CSS animations (, , ).
-  (NEW):
    - **Importance**: Comprehensive documentation of the system.
    - **Changes**: Created during a system review.
-  (NEW):
    - **Importance**: Documents all critical bug fixes.
    - **Changes**: Created to log resolution of ObjectId/UUID issues, data inconsistencies, and unsafe access patterns.
-  (NEW):
    - **Importance**: Summarizes the session for the next engineer.
    - **Changes**: Created for context transfer, detailing database state and key fixes.
-  (NEW):
    - **Importance**: Outlines a plan to unify bills and inventory data into a single collection.
    - **Changes**: Created to address the architectural flaw of dual data sources.
-  (NEW):
    - **Importance**: Details the strategy for migrating to a UUID-only system.
    - **Changes**: Created as part of the refactor plan.
-  (NEW):
    - **Importance**: The overarching plan for the current UUID refactor.
    - **Changes**: Created to guide the comprehensive overhaul of the ID system.
-  (NEW):
    - **Importance**: Script for migrating existing data to standardized formats.
    - **Changes**: Proposed for future data cleanup.
-  (NEW):
    - **Importance**: Defines functions for standardized data creation and validation.
    - **Changes**: Created to prevent future data inconsistency issues.
-  (NEW):
    - **Importance**: Cleans all business data and seeds a fresh database with consistent test data.
    - **Changes**: Created and used multiple times to reset the database for testing, also updated to fix CreditCard schema issues in test data generation.
</code_architecture>

<pending_tasks>
- Complete  on the Customer Detail page.
- Implement  functionality in the Transactions tab.
- Implement  in the Transactions tab. (Editing capability was added, but the full scope may imply more, e.g., view details without edit mode).
- Implement  to the Transactions tab.
- Implement  and  in the Analytics tab.
- Implement  (for revenue and profit transactions) in the Analytics tab.
- Complete the frontend refactor to exclusively use UUIDs, adapting to the new backend.
- Run the full database migration to standardize all existing records to UUIDs.
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer commenced a comprehensive system refactor to exclusively use UUIDs for all entity identifiers across the application. This decision was driven by persistent data inconsistency issues, such as the ObjectId vs. UUID conflict, which caused recurring 404 errors, broken relationships, and general system instability. The user explicitly chose this Option B to eliminate technical debt and ensure a clean, maintainable architecture.

The work is currently in PHASE 1: BACKEND SYSTEM REDESIGN of the . This phase involves rewriting the  to remove all ObjectId handling and instead rely solely on UUIDs.

Specific progress includes:
1.  **Creation of **: A new utility file to centralize UUID generation and validation.
2.  **Extensive rewrite of **:
    *   **Customer APIs**: Fully refactored for UUID-only.
    *   **Bills APIs**: Fully refactored for UUID-only, now based on a unified inventory system (eliminating the previous dual  and  collection problem).
    *   **Inventory APIs**: Integrated into the new UUID-only structure.
    *   **Pydantic Models**: Updated to enforce UUID validation for all relevant ID fields.
    *   **Database Interactions**: Modified to query and store data using UUIDs exclusively.
    *   **Error Handling**: Adjusted for UUID-specific validation and not found scenarios.

The engineer has confirmed that the refactored Customer, Bill, and Inventory APIs are now UUID-only and integrated with the unified inventory system. The next step is to continue this refactor for the Sales API and other remaining backend endpoints.
</current_work>

<optional_next_step>
Complete the backend UUID-only refactor by implementing the Sales API.
</optional_next_step>
<direct_quotes>
ðŸ“‹ Continue with SALES API vÃ  complete backend:
</direct_quotes>
